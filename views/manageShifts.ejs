<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Shifts</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>

<div class="container mt-4">
    <h2 class="text-center">Manage Shifts</h2>

    <!-- üìå Add New Shift (Initially Collapsed) -->
    <div class="mb-3">
        <button class="btn btn-primary w-100" onclick="toggleShiftForm()">‚ûï Add New Shift</button>
    </div>
    <div id="addShiftSection" class="card p-3 mb-3 d-none">
        <h4 class="text-center">‚ûï Add New Shift</h4>
        <form id="addShiftForm">
            <div class="row">
                <div class="col-md-2">
                    <input type="number" class="form-control" id="shiftWeek" placeholder="Week" required>
                </div>
                <div class="col-md-2">
                    <input type="number" class="form-control" id="shiftYear" placeholder="Year" value="2025" required>
                </div>
                <div class="col-md-2">
                    <select id="shiftType" class="form-select" required>
                        <option value="Morning">Morning</option>
                        <option value="Afternoon">Afternoon</option>
                        <option value="Night">Night</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="teamLeaderSelect" class="form-select" required>
                        <option value="">Select Team Leader</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="departmentSelect" class="form-select" required>
                        <option value="">Select Department</option>
                    </select>
                </div>
            </div>
            <button type="submit" class="btn btn-success mt-3 w-100">‚úÖ Save Shift</button>
        </form>
    </div>

    <!-- üìå Shift Filters -->
    <div class="row mb-3">
        <div class="col-md-2">
            <input type="number" id="filterWeek" class="form-control" placeholder="üîç Week" onkeyup="filterShifts()">
        </div>
        <div class="col-md-2">
            <input type="number" id="filterYear" class="form-control" placeholder="üìÖ Year" value="2025" onkeyup="filterShifts()">
        </div>
        <div class="col-md-2">
            <select id="filterShiftType" class="form-select" onchange="filterShifts()">
                <option value="">üåÖ All Shifts</option>
                <option value="Morning">Morning</option>
                <option value="Afternoon">Afternoon</option>
                <option value="Night">Night</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="filterTeamLeader" class="form-select" onchange="filterShifts()">
                <option value="">üìã All Team Leaders</option>
            </select>
        </div>
        <div class="col-md-3">
            <select id="filterDepartment" class="form-select" onchange="filterShifts()">
                <option value="">üè¢ All Departments</option>
            </select>
        </div>
    </div>

    <!-- üìå Shift List Table -->
    <table class="table table-bordered text-center">
        <thead class="table-dark">
            <tr>
                <th>Week</th>
                <th>Year</th>
                <th>Shift Type</th>
                <th>Department</th>
                <th>TL Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="shiftList">
            <!-- Dynamically Loaded -->
        </tbody>
    </table>
</div>

<!-- üìå JavaScript -->
<script>
    document.addEventListener("DOMContentLoaded", loadShifts);

    // üìå Toggle Shift Form
    function toggleShiftForm() {
        const form = document.getElementById("addShiftSection");
        form.classList.toggle("d-none");
    }

    // üìå Load Shifts & Populate Filters
    async function loadShifts() {
        try {
            const [shiftRes, tlRes, deptRes] = await Promise.all([
                fetch("/api/shifts"),
                fetch("/api/teamleaders"),
                fetch("/api/department")
            ]);

            const [shiftData, tlData, deptData] = await Promise.all([
                shiftRes.json(),
                tlRes.json(),
                deptRes.json()
            ]);

            console.log("‚úÖ Shifts:", shiftData.data);
            console.log("‚úÖ Team Leaders:", tlData.data);
            console.log("‚úÖ Departments:", deptData.data);

            if (!shiftData.success || !tlData.success || !deptData.success) {
                console.error("‚ùå Failed to load data!");
                return;
            }

            renderShifts(shiftData.data, tlData.data, deptData.data);
            populateFilters(tlData.data, deptData.data);
            populateShiftForm(tlData.data, deptData.data);
        } catch (error) {
            console.error("‚ùå Error loading shifts:", error);
        }
    }

// üìå Render Shift Table
function renderShifts(shifts, teamLeaders = [], departments = []) {
    const shiftList = document.getElementById("shiftList");
    shiftList.innerHTML = "";

    if (!Array.isArray(departments)) {
        console.error("‚ùå Departments is not an array:", departments);
    }
    if (!Array.isArray(teamLeaders)) {
        console.error("‚ùå TeamLeaders is not an array:", teamLeaders);
    }


    shifts.forEach(shift => {
        const department = departments.find(d => d._id === (shift.department?._id || shift.department)) || { departmentName: "Unknown", _id: "" };
        const teamLeader = teamLeaders.find(tl => tl._id === (shift.teamLeader?._id || shift.teamLeader)) || { name: "Unknown", _id: "" };

        const shiftRow = document.createElement("tr");
        shiftRow.innerHTML = `
            <td><span class="editable">${shift.shiftWeek}</span></td>
            <td><span class="editable">${shift.shiftYear}</span></td>
            <td>
                <span class="editable">${shift.shift}</span>
                <select class="form-select form-select-sm d-none">
                    <option value="Morning" ${shift.shift === "Morning" ? "selected" : ""}>Morning</option>
                    <option value="Afternoon" ${shift.shift === "Afternoon" ? "selected" : ""}>Afternoon</option>
                    <option value="Night" ${shift.shift === "Night" ? "selected" : ""}>Night</option>
                </select>
            </td>
            <td>
                <span class="editable">${department.departmentName}</span>
                <select class="form-select form-select-sm d-none">
                    ${departments.map(dept => 
                        `<option value="${dept._id}" ${dept._id === department._id ? "selected" : ""}>${dept.departmentName}</option>`
                    ).join("")}
                </select>
            </td>
            <td>
                <span class="editable">${teamLeader.name}</span>
                <select class="form-select form-select-sm d-none">
                    ${teamLeaders.map(tl => 
                        `<option value="${tl._id}" ${tl._id === teamLeader._id ? "selected" : ""}>${tl.name}</option>`
                    ).join("")}
                </select>
            </td>
            <td>
                <button class="btn btn-secondary btn-sm" onclick="toggleFastEdit(this)">‚ö° Fast Edit</button>
                <button class="btn btn-warning btn-sm" onclick="editShift('${shift._id}')">‚úèÔ∏è Edit</button>
                <button class="btn btn-info btn-sm" onclick="viewPerformance('${shift._id}')">üìä Performance</button>
                <button class="btn btn-danger btn-sm" onclick="deleteShift('${shift._id}')">üóë Delete</button>
            </td>
        `;

        shiftList.appendChild(shiftRow);
    });
}

// üìå Toggle Fast Edit Mode
function toggleFastEdit(button) {
    const row = button.closest("tr");
    const spans = row.querySelectorAll(".editable");
    const selects = row.querySelectorAll("select");

    const isEditing = spans[0].classList.contains("d-none");

    if (isEditing) {
        // üìå Save changes and disable edit mode
        const shiftId = button.getAttribute("data-id");

        const updatedShift = {
            shiftWeek: row.children[0].querySelector("span").innerText.trim(),
            shiftYear: row.children[1].querySelector("span").innerText.trim(),
            shift: row.children[2].querySelector("select").value,
            department: row.children[3].querySelector("select").value,
            teamLeader: row.children[4].querySelector("select").value
        };

        updateShift(shiftId, updatedShift);

        // Toggle visibility
        spans.forEach(span => span.classList.remove("d-none"));
        selects.forEach(select => select.classList.add("d-none"));
        button.textContent = "‚ö° Fast Edit";
        button.classList.remove("btn-success");
        button.classList.add("btn-secondary");
    } else {
        // üìå Enable edit mode
        spans.forEach(span => span.classList.add("d-none"));
        selects.forEach(select => select.classList.remove("d-none"));
        button.textContent = "üíæ Save";
        button.classList.remove("btn-secondary");
        button.classList.add("btn-success");
    }
}

// üìå Update Shift Data
async function updateShift(id, updatedShift) {
    try {
        const response = await fetch(`/api/shifts/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedShift)
        });

        if (!response.ok) throw new Error("Failed to update shift");

        console.log("‚úÖ Shift Updated:", updatedShift);
    } catch (error) {
        console.error("‚ùå Error updating shift:", error);
    }
}

    // üìå Populate Filters
    function populateFilters(teamLeaders, departments) {
        document.getElementById("filterTeamLeader").innerHTML = `<option value="">üìã All Team Leaders</option>` + 
            teamLeaders.map(tl => `<option value="${tl._id}">${tl.name}</option>`).join("");

        document.getElementById("filterDepartment").innerHTML = `<option value="">üè¢ All Departments</option>` + 
            departments.map(dept => `<option value="${dept._id}">${dept.departmentName}</option>`).join("");
    }

    // üìå Populate Shift Form Selects
    function populateShiftForm(teamLeaders, departments) {
        document.getElementById("teamLeaderSelect").innerHTML = `<option value="">Select Team Leader</option>` + 
            teamLeaders.map(tl => `<option value="${tl._id}">${tl.name}</option>`).join("");

        document.getElementById("departmentSelect").innerHTML = `<option value="">Select Department</option>` + 
            departments.map(dept => `<option value="${dept._id}">${dept.departmentName}</option>`).join("");
    }

    // üìå Filter Shifts
    function filterShifts() {
        const week = document.getElementById("filterWeek").value;
        const year = document.getElementById("filterYear").value;
        const shiftType = document.getElementById("filterShiftType").value;
        const teamLeader = document.getElementById("filterTeamLeader").value;
        const department = document.getElementById("filterDepartment").value;

        fetch(`/api/shifts?week=${week}&year=${year}&shift=${shiftType}&teamLeader=${teamLeader}&department=${department}`)
            .then(res => res.json())
            .then(data => renderShifts(data.data));
    }

    // üìå Add New Shift
    document.getElementById("addShiftForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        
        const shiftWeek = document.getElementById("shiftWeek").value;
        const shiftYear = document.getElementById("shiftYear").value;
        const shiftType = document.getElementById("shiftType").value;
        const teamLeader = document.getElementById("teamLeaderSelect").value;
        const department = document.getElementById("departmentSelect").value;

        await fetch("/api/shifts", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ shiftWeek, shiftYear, shift: shiftType, teamLeader, department })
        });

        toggleShiftForm();
        loadShifts();
    });

</script>
</body>
</html>