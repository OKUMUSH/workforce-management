<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Shifts</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        body { background-color: #f4f6f9; }
        .container { max-width: 900px; }
        .table th, .table td { vertical-align: middle; }
        .hidden { display: none; }
    </style>
</head>
<body>

<div class="container mt-4">
    <h2 class="text-center">📌 Manage Shifts</h2>

<!-- 📌 Add New Shift (Collapsible) -->
<div class="mb-3">
    <button class="btn btn-primary w-100" onclick="toggleShiftForm()" style="display: none;">➕ Add New Shift</button>
</div>
<div id="addShiftSection" class="card p-3 mb-3 hidden">
    <h5 class="text-center">➕ Add New Shift</h5>
    <form id="addShiftForm">
        <div class="row">
            <div class="col-md-3">
                <input type="text" class="form-control" id="shiftName" placeholder="Shift Name" required>
            </div>
            <div class="col-md-2">
                <select id="shiftType" class="form-select" required>
                    <option value="Morning">Morning</option>
                    <option value="Afternoon">Afternoon</option>
                    <option value="Night">Night</option>
                </select>
            </div>
            <div class="col-md-2">
                <input type="number" class="form-control" id="shiftWeek" placeholder="Week" required>
            </div>
            <div class="col-md-2">
                <input type="number" class="form-control" id="shiftYear" placeholder="Year" value="2025" required>
            </div>
            <div class="col-md-3 d-grid">
                <button type="submit" class="btn btn-success">✅ Save Shift</button>
            </div>
        </div>
    </form>
</div>

    <!-- 📌 Shift Filters -->
<div class="row justify-content-center mb-3">
    <div class="col-md-3">
        <select id="filterWeek" class="form-select" onchange="filterShifts()">
            <!-- Weeks will be inserted dynamically -->
        </select>
    </div>
    <div class="col-md-3">
        <select id="filterYear" class="form-select" onchange="filterShifts()">
            <!-- Years will be inserted dynamically -->
        </select>
    </div>
    <div class="col-md-3">
        <select id="filterShiftType" class="form-select" onchange="filterShifts()">
            <option value="">🌅 All Shifts</option>
            <option value="Morning">Morning</option>
            <option value="Afternoon">Afternoon</option>
            <option value="Night">Night</option>
        </select>
    </div>
</div>

    <!-- 📌 Shift List Table -->
    <div class="card shadow-sm p-3">
        <table class="table table-striped table-bordered text-center">
            <thead class="table-dark">
                <tr>
                    <th>Name</th>
                    <th>Shift</th>
                    <th>Week</th>
                    <th>Year</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="shiftList">
                <!-- 📌 Shifts will be dynamically inserted here -->
            </tbody>
        </table>
    </div>
</div>

<!-- 📌 JavaScript -->
<script>
// Shift Codes Mapping
const shiftCodes = {
    Monday: { Morning: "MONDAY MAPO", Afternoon: "MONDAY MAPA" },
    Tuesday: { Morning: "TUESDAY WOPO", Afternoon: "TUESDAY WOPA" },
    Wednesday: { Morning: "WEDNESDAY DOPO", Afternoon: "WEDNESDAY DOPA" },
    Thursday: { Morning: "THURSDAY VRPO", Afternoon: "THURSDAY VRPA" },
    Friday: { Morning: "FRIDAY ZOPO", Afternoon: "FRIDAY ZOPA" },
    Saturday: { Morning: "SATURDAY ZAPO", Afternoon: "SATURDAY ZAPA" },
    Sunday: { Morning: "SUNDAY SOPO", Afternoon: "SUNDAY SOPA" },
};

    // 📌 Shift Status Mapping
    const shiftStatuses = {
    needPlanning: { text: "🟠 Need Planning", class: "badge bg-warning text-dark" },
    needFullPlanning: { text: "🟠 Need Full Planning", class: "badge bg-warning text-dark" },
    planned: { text: "🟡 Planned", class: "badge bg-primary" },
    running: { text: "🟢 Running", class: "badge bg-success" },
    needReport: { text: "🔴 Need Report", class: "badge bg-danger" },
    reported: { text: "✅ Reported", class: "badge bg-success" }
};


// 📌 Get Shift Status (Directly from shift.status)
function getShiftStatus(shift) {
    const statusKey = shift.status;  // ✅ Use `shift.status` directly
    if (!statusKey || !shiftStatuses[statusKey]) {
        return `<span class="badge bg-secondary">❌ Unknown Status</span>`;
    }

    // 📌 **Generate Status Badge**
    const statusObj = shiftStatuses[statusKey];
    let statusBadge = `<span class="${statusObj.class}">${statusObj.text}</span>`;

    // 🔴 **If status is "needReport", add a button**
    if (statusKey === "needReport") {
        statusBadge += ` <button class="btn btn-sm btn-outline-danger ms-2" onclick="reportShift('${shift._id}')">📑 Report Now</button>`;
    }
    // 🔴 **If status is "needPlanning or needFullPlanning", add a button**
    if (statusKey === "needPlanning" || statusKey === "needFullPlanning") {
        statusBadge += ` <button class="btn btn-sm btn-outline-warning ms-2" onclick="planShift('${shift._id}')">📅 Plan Now</button>`;
    }

    return statusBadge;
}

// Order of days for sorting
const dayOrder = Object.keys(shiftCodes);


document.addEventListener("DOMContentLoaded", () => {
        populateWeekYearFilters();
    });

    function getWeekNumber(date) {
        const startOfYear = new Date(date.getFullYear(), 0, 1);
        return Math.ceil((((date - startOfYear) / 86400000) + 1) / 7);
    }

    async function populateWeekYearFilters() {
        const today = new Date();
        const currentWeek = getWeekNumber(today);
        const currentYear = today.getFullYear();

        const response = await fetch("/api/shifts/weeks-years");
        const data = await response.json();

        const weekSelect = document.getElementById("filterWeek");
        const yearSelect = document.getElementById("filterYear");

        weekSelect.innerHTML = data.weeks.map(week => 
            `<option value="${week}" ${week == currentWeek ? "selected" : ""}>Week ${week}</option>`
        ).join("");

        yearSelect.innerHTML = data.years.map(year => 
            `<option value="${year}" ${year == currentYear ? "selected" : ""}>${year}</option>`
        ).join("");

        filterShifts();
    }

    function toggleShiftForm() {
        document.getElementById("addShiftSection").classList.toggle("hidden");
    }

    // 📌 Filter Shifts
async function filterShifts() {
    const week = document.getElementById("filterWeek").value;
    const year = document.getElementById("filterYear").value;
    const shiftType = document.getElementById("filterShiftType").value;

    // Build query parameters dynamically
    let queryParams = new URLSearchParams();
    if (week) queryParams.append("week", week);
    if (year) queryParams.append("year", year);
    if (shiftType) queryParams.append("type", shiftType);

    const response = await fetch(`/api/shifts?${queryParams}`);

    try {
        // Fetch filtered shifts from API
        
        const data = await response.json();

        const shiftList = document.getElementById("shiftList");
        shiftList.innerHTML = "";

        if (data.data.length === 0) {
            shiftList.innerHTML = `<tr><td colspan="5" class="text-center">🚫 No shifts found</td></tr>`;
            return;
        }

        // Sort shifts by day & type
        data.data.sort((a, b) => {
            const dayA = dayOrder.find(day => shiftCodes[day][a.type] === a.name) || "";
            const dayB = dayOrder.find(day => shiftCodes[day][b.type] === b.name) || "";

            const dayIndexA = dayOrder.indexOf(dayA);
            const dayIndexB = dayOrder.indexOf(dayB);

            if (dayIndexA !== dayIndexB) {
                return dayIndexA - dayIndexB; // Sort by day first
            } else {
                return a.type === "Morning" ? -1 : 1; // Morning shifts before Afternoon
            }
        });
        // Render shifts dynamically
        data.data.forEach(shift => {

            const status = getShiftStatus(shift);
            let actions = "";

            if (status == "reported") {
                actions = `<button class="btn btn-sm btn-outline-primary" onclick="viewPerformance('${shift._id}')">📊 View Performance</button>`;
            }

            shiftList.innerHTML += `
                <tr>
                    <td>${shift.name}</td>
                    <td>${shift.type}</td>
                    <td>${shift.week}</td>
                    <td>${shift.year}</td>
                    <td>${status}</td>
                    <td>
                        ${actions}
                    </td>
                </tr>`;
        });

    } catch (error) {
        console.error("❌ Error fetching shifts:", error);
        document.getElementById("shiftList").innerHTML =
            `<tr><td colspan="5" class="text-center text-danger">❌ Error loading shifts</td></tr>`;
    }
}

// 📌 Add New Shift
document.getElementById("addShiftForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const shiftName = document.getElementById("shiftName").value.trim();
    const shiftType = document.getElementById("shiftType").value.trim();
    const shiftWeek = document.getElementById("shiftWeek").value.trim();
    const shiftYear = document.getElementById("shiftYear").value.trim();

    console.log("📤 Sending Shift Data:", { shiftName, shiftType, shiftWeek, shiftYear });

    if (!shiftName || !shiftType || !shiftWeek || !shiftYear) {
        console.error("❌ Error: All fields must be filled.");
        alert("Please fill in all fields before submitting.");
        return;
    }

    const newShift = { 
        name: shiftName, 
        type: shiftType, 
        week: parseInt(shiftWeek, 10), 
        year: parseInt(shiftYear, 10) 
    };

    try {
        const response = await fetch("/api/shifts", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(newShift)
        });

        const result = await response.json();

        if (!response.ok) {
            console.error("❌ Error adding shift:", result);
            alert(`Error: ${result.message || "Failed to add shift"}`);
            return;
        }

        console.log("✅ Shift added successfully:", result);
        document.getElementById("addShiftForm").reset();
        toggleShiftForm();
        filterShifts();
    } catch (error) {
        console.error("❌ Error filtering shift:", error);
    }
});
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>